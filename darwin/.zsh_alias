# file system
alias sl='ls'
alias ll='ls -alF'
alias lf='ls -d'
alias lt='ls -hlt'
alias la='ls -A'
alias l='ll -h'
alias md='mkdir -p'
alias df='df -h'
alias rf='readlink -f'
alias rm='rm -i'
# kill all mosh server except last one
alias kms='kill $(ps --no-headers --sort=start_time -C mosh-server -o pid | head -n -1)'
alias odd='od -A x -t xz -N 256 -v'

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

alias rcp='rsync -avuz'

# other tools
alias vi='vim'
alias v='vim'
alias mk='make'
alias ta='tmux attach -t default || tmux new -s default'
alias vd='vimdiff'
alias lr='less -r' alias path='echo -e ${PATH//:/\\n}'
alias myip='curl -s http://myip.ipip.net'

alias gd='git diff --no-index'
alias gc='git clone'
alias gcs='git clone --single-branch --depth=1'
alias gcl='git clone --single-branch --depth=50'
alias cx='cd `git rev-parse --show-toplevel`'

if type -p fd &>/dev/null; then
	alias fd2='fd -d 2'
	alias fd3='fd -d 3'
	alias fd4='fd -d 4'
	alias fd5='fd -d 5'
	alias fu='fd -uud'
	alias fu2='fd -uud 2'
	alias fu3='fd -uud 3'
	alias fu4='fd -uud 4'
	alias fu5='fd -uud 5'
else
	alias fd2='find -maxdepth 2 -name'
	alias fd3='find -maxdepth 3 -name'
	alias fd4='find -maxdepth 4 -name'
	alias fd5='find -maxdepth 5 -name'
fi

if type -p rg &>/dev/null; then
	alias gg='rg -inS -e'
	alias gw='rg -inw -e'
	alias gf='rg -inF -e'
	alias gc='rg -in -tc -e'
	alias gm='rg -in -tamake -tmake -e'
else
	alias gg='grep -inrI ./ -e'
	alias gf='grep -inrIF ./ -e'
fi

if type -p delta $>/dev/null; then
	alias de='delta'
	alias di='delta --line-numbers'
	alias ds='delta --line-numbers --side-by-side'
	alias dh='delta --line-numbers --side-by-side --hyperlinks'
fi

# tldr find (tealdeer)
if type -p tldr &>/dev/null; then
	alias tl='tldr'
fi


# open GUI APP directly
alias firefox='open -a "Microsoft Edge"'
alias typora='open -a "Typora"'
alias kicad='open -a "KiCad"'
alias arduino='open -a "Arduino IDE"'
alias dict='open -a "Eudic"'

# dbg tools
egdb() { emacs --eval "(gdb \"gdb --annotate=3 -i=mi $*\")"; }

# cmdline proxy
# function：enable/disable/check cmdline proxy status
# usage：toggle_proxy on     (enable proxy)
#      toggle_proxy off      (disable proxy)
#      toggle_proxy status   (check status)
function toggle_proxy() {
  local http_port="8889"
  local socks_port="1089"

  local http_proxy_var="http_proxy"
  local https_proxy_var="https_proxy"
  local socks_proxy_var="socks_proxy"
  local no_proxy_var="no_proxy"

  local action="${1:-status}"

  case "$action" in
    on)
      export http_proxy="http://127.0.0.1:$http_port"
      export https_proxy="http://127.0.0.1:$http_port"
      export socks_proxy="socks5://127.0.0.1:$socks_port"
      export no_proxy="localhost,127.0.0.1,::1"

      echo "Proxy enabled (HTTP: $http_port, SOCKS: $socks_port)。"
      ;;

    off)
      unset http_proxy
      unset https_proxy
      unset socks_proxy
      unset no_proxy

      echo "Proxy disabled"
      ;;

    status)
      echo "Current Proxy Settings:"
      if [[ -n "$http_proxy" || -n "$socks_proxy" ]]; then
        env | grep -E "($http_proxy_var|$https_proxy_var|$socks_proxy_var|$no_proxy_var)"
      else
        echo "No proxy is set."
      fi
      ;;

    *)
      echo "usage：toggle_proxy on|off|status"
      return 1
      ;;
  esac
}
